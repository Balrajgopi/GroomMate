@model IEnumerable<GroomMate.Models.Appointment>

@{
    ViewBag.Title = "Admin Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Admin Dashboard</h2>
<p>Manage all upcoming and past appointments.</p>

<table class="table table-hover table-striped">
    <thead>
        <tr>
            <th>Customer</th>
            <th>Service</th>
            <th>Date & Time</th>
            <th>Assigned Staff</th>
            <th>Status</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var appt in Model)
        {
            <tr>
                <td>@appt.User.FullName</td>
                <td>@appt.Service.ServiceName</td>
                <td>@appt.AppointmentDate.ToString("g")</td>
                <td>
                    @* Logic to display staff dropdown or name *@
                    @if (appt.Status == "Pending")
                    {
                        using (Html.BeginForm("AssignStaff", "Admin", FormMethod.Post))
                        {
                            @Html.AntiForgeryToken()
                            @Html.Hidden("appointmentId", appt.AppointmentID)

                            @* Minimal fix: required + guarded onchange so we never submit empty staffId *@
                            @Html.DropDownList(
                                "staffId",
                                new SelectList((IEnumerable<SelectListItem>)ViewBag.StaffList, "Value", "Text", appt.StaffId),
                                "-- Select Staff --",
                                new
                                {
                                    @class = "form-select form-select-sm",
                                    required = "required",
                                    onchange = "if(this.value && this.value.length>0){ this.form.submit(); }"
                                }
                            )
                        }
                    }
                    else
                    {
                        @(appt.Staff?.FullName ?? "Not Assigned")
                    }
                </td>
                <td><span class="badge bg-info text-dark">@appt.Status</span></td>
                <td>
                    @if (appt.Status == "Pending" && appt.StaffId.HasValue)
                    {
                        using (Html.BeginForm("ConfirmAppointment", "Admin", new { id = appt.AppointmentID }, FormMethod.Post, new { @style = "display:inline;" }))
                        {
                            @Html.AntiForgeryToken()
                            <button type="submit" class="btn btn-success btn-sm">Confirm</button>
                        }
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@if (Request.IsAuthenticated)
{
    // If the user IS logged in, show a form for logging out
    using (Html.BeginForm("Logout", "Account", FormMethod.Post, new { id = "logoutForm", @class = "navbar-right" }))
    {
        @Html.AntiForgeryToken()

        <ul class="nav navbar-nav navbar-right">
            <li>
                @Html.ActionLink("Hello " + User.Identity.Name + "!", "Index", "Home", routeValues: null, htmlAttributes: new { title = "Manage" })
            </li>
            <li><a href="javascript:document.getElementById('logoutForm').submit()">Logout</a></li>
        </ul>
    }
}
else
{
    // If the user IS NOT logged in, show links to log in and register
    <ul class="nav navbar-nav navbar-right">
        <li>@Html.ActionLink("Register", "Register", "Account", routeValues: null, htmlAttributes: new { id = "registerLink" })</li>
        <li>@Html.ActionLink("Log in", "Login", "Account", routeValues: null, htmlAttributes: new { id = "loginLink" })</li>
    </ul>
}
